diff --git a/floppy/test.c b/floppy/test.c
index 39c8a5c..3e2e3fb 100644
--- a/floppy/test.c
+++ b/floppy/test.c
@@ -1,30 +1,176 @@
-#include <stdio.h>
-#include <stdlib.h>
-
-#include <linux/unistd.h>
 #include <sys/syscall.h>
+#include <sys/types.h>
+#include <unistd.h>
+
+int main(int argc, char **argv)
+{
+	int eventIDs[10] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
+	
+	int ret_val;
+
+	printf("Calling doeventclose and doeventsig on events with IDs 1 and 0 respectively...\n");
+
+	/* Try to destroy an event */
+	ret_val = syscall(182, 1);
+	if(ret_val == -1)
+		printf("doeventclose returned %i since there are no events yet\n", ret_val);
+	else printf("Unknown error in doeventclose\n");
+
+	printf("\n\n");
+
+	/* Try to signal an event */
+	ret_val = syscall(184, 0);
+	if(ret_val == -1)
+		printf("doeventsig returned %i since there are no events yet\n", ret_val);
+	else printf("Unknown error in doeventsig\n");
+
+	printf("\n\n");
+
+	/* Create a bunch of events */	
+	for(int i = 0; i < 100; i++)
+	{
+		ret_val = syscall(181);
+		if(ret_val >= 0)
+			printf("The event with ID = %i was created\n", ret_val);
+		else printf("Event creation failed\n");
+	}
+
+	printf("\n\n");
+
+	/* Output stats of event 0 */
+	uid_t UID = -1;
+	gid_t GID = -1;
+	int UIDFlag = -1;
+	int GIDFlag = -1;
+	printf("Calling doeventstat on event 0. Result: %i\n", syscall(214, 0, &UID, &GID, &UIDFlag, &GIDFlag));
+	printf("Event stats: ID = 0, UID = %i, GID = %i, UIDFlag = %i, GIDFlag = %i\n", UID, GID, UIDFlag, GIDFlag);
+			
+	printf("\n\n");
+	
+	/* Try to destroy an event with ID 0 again*/
+	ret_val = syscall(182, 0);
+	if(ret_val >= -1)
+		printf("doeventclose returned %i."
+		" Event closing successful, since event with ID 0 existed\n", ret_val);
+	else printf("Error in doeventclose\n");
+
+	printf("\n\n");
+
+	/* Try to get stats of event 0 */
+	printf("Calling doeventstat on event ID 0: %i\n", syscall(214, 0, &UID, &GID, &UIDFlag, &GIDFlag));
+
+	printf("\n\n");
+
+	/* Try to signal an event again*/
+	ret_val = syscall(184, 99);
+	if(ret_val >= -1)
+		printf("doeventsig returned %i. Signaling is successful,"
+ 		"since event with ID 99 existed and 0 processes are waiting on this event\n", ret_val);
+	else printf("Error in doeventsig\n");
+
+	printf("\n\n");
+
+	/* Testing signals. 
+	*  Creating 4 children and sending them to sleep on event 99 and then signaling them twice 
+	*/
+	pid_t pid = fork();
+	if(pid == 0)
+	{		
+		fork();
+		fork();
+		printf("Sending process %i to sleep on an event 99\n", getpid());
+		ret_val = syscall(183, 99);
+		if(ret_val != -1)
+			printf("Child has been awakened\n");
+		else printf("Error in doeventwait\n");		
+		return 0;
+	}
+	else
+	{
+		sleep(1);
+		printf("Trying to wake up processes waiting on event 99. Sending signal...\n");
+
+		ret_val = syscall(184, 99);
+		if(ret_val != -1)
+			printf("Doeventsig successful. "
+			"The number of processes that were waiting on event 99: %i\n", ret_val);
+		else printf("Unknown error in doeventsig");
+		
+		
+		printf("Trying to wake up processes again. Sending signal...\n");
+
+		ret_val = syscall(184, 99);
+		if(ret_val > 0)
+			printf("There are %i process(es) that have not been awakened yet\n", ret_val);
+		else if(ret_val == 0)
+			printf("Doeventsig returned 0 since there are no processes waiting on event 98 anymore\n");
+		else printf("Error in doeventsig\n");		
+	}
+
+	sleep(1);
+	printf("\n\n");
+
+
+	/* Trying to close event with several processes waiting on it */
+	pid = fork();
+	if(pid == 0)
+	{		
+		fork();
+		fork();
+		printf("Sending process %i to sleep on an event 99\n", getpid());
+
+		ret_val = syscall(183, 99);
+		if(ret_val != -1)
+			printf("Child has been awakened\n");
+		else printf("Error in doeventwait\n");
+		return 0;		
+	}
+	else
+	{
+		sleep(1);
+		printf("Trying to close event 99...\n");
+
+		ret_val = syscall(182, 99);
+		if(ret_val != -1)
+			printf("Doeventclose successful."
+			" The number of processes waited on event 99: %i\n", ret_val);
+		else printf("Unknown error in doeventclose\n");
+	}
+
+	sleep(1);
+	printf("\n\n");
+
+	/* Testing access control mechanism */	
+
+	printf("Change UID, GID of event 98 to 100 and UID and GID of current process to 200\n");
+	ret_val = syscall(205, 98, 100, 100);	
+	seteuid(200);
+	setegid(200);
+
+	/* try to change UIDFlag and GIDFlag */
+
+	printf("Calling Doeventchmod on event 98...\n");
+	ret_val = syscall(211, 98, 0, 0);
+	if(ret_val == -1) 
+		printf("Doeventchmod returned -1 because current process has effective UID %i\n", geteuid());
+	else printf("Unknown error in doeventchmod\n");
+
+	printf("\n\n");	
+
+	printf("Changing UID, GID of event 98 to 200 and trying again:\n");
+	ret_val = syscall(205, 98, 200, 200);	
+
+	
+	/* try to change UIDFlag and GIDFlag again */
+
+	ret_val = syscall(211, 98, 0, 0);
+	printf("Calling doeventstat on event ID 98: %i\n", syscall(214, 98, &UID, &GID, &UIDFlag, &GIDFlag));
+	printf("Event stats: ID = 98, UID = %i, GID = %i, UIDFlag = %i, GIDFlag = %i\n", UID, GID, UIDFlag, GIDFlag);
 
-/*
- * Function: main()
- *
- * Description:
- *   Entry point for this program.
- *
- * Inputs:
- *   argc - The number of argument with which this program was executed.
- *   argv - Array of pointers to strings containing the command-line arguments. 
- *
- * Return value:
- *   0 - This program terminated normally.
- */
-int
-main (int argc, char ** argv) {
-	/* Print a friendly message */
-	printf ("Hello from User Space!\n");
-
-	/* Call our new system call */
-	syscall (181, NULL);
-
-	/* Exit the program */
+	
+	for(int i=0; i<100; i++)
+	{
+		syscall(182, i);
+	}
 	return 0;
 }
diff --git a/linux-3.18.20/arch/x86/syscalls/syscall_64.tbl b/linux-3.18.20/arch/x86/syscalls/syscall_64.tbl
index 281150b..5154a84 100644
--- a/linux-3.18.20/arch/x86/syscalls/syscall_64.tbl
+++ b/linux-3.18.20/arch/x86/syscalls/syscall_64.tbl
@@ -187,11 +187,11 @@
 178	64	query_module
 179	common	quotactl		sys_quotactl
 180	64	nfsservctl
-181	common	getpmsg
-182	common	putpmsg
-183	common	afs_syscall
-184	common	tuxcall
-185	common	security
+181	common	doeventopen		sys_doeventopen
+182	common	doeventclose		sys_doeventclose
+183	common	doeventwait		sys_doeventwait
+184	common	doeventsig		sys_doeventsig
+185	common	doeventinfo		sys_doeventinfo
 186	common	gettid			sys_gettid
 187	common	readahead		sys_readahead
 188	common	setxattr		sys_setxattr
@@ -211,16 +211,16 @@
 202	common	futex			sys_futex
 203	common	sched_setaffinity	sys_sched_setaffinity
 204	common	sched_getaffinity	sys_sched_getaffinity
-205	64	set_thread_area
+205	64	doeventchown		sys_doeventchown
 206	64	io_setup		sys_io_setup
 207	common	io_destroy		sys_io_destroy
 208	common	io_getevents		sys_io_getevents
 209	64	io_submit		sys_io_submit
 210	common	io_cancel		sys_io_cancel
-211	64	get_thread_area
+211	64	doeventchmod		sys_doeventchmod
 212	common	lookup_dcookie		sys_lookup_dcookie
 213	common	epoll_create		sys_epoll_create
-214	64	epoll_ctl_old
+214	64	doeventstat		sys_doeventstat
 215	64	epoll_wait_old
 216	common	remap_file_pages	sys_remap_file_pages
 217	common	getdents64		sys_getdents64
diff --git a/linux-3.18.20/include/linux/events.h b/linux-3.18.20/include/linux/events.h
new file mode 100644
index 0000000..60e0934
--- /dev/null
+++ b/linux-3.18.20/include/linux/events.h
@@ -0,0 +1,31 @@
+#ifndef _EVENTS_H
+#define _EVENTS_H
+
+#include <linux/types.h>
+#include <linux/list.h>
+#include <linux/wait.h>
+
+/* Structure implementing our event abstraction */
+struct event_struct 
+{
+	int eventID;			// Unique ID of an event
+	uid_t UID;			// Effective UID associated with an event
+	gid_t GID;			// Effective GID associated with an event
+	int UIDFlag;			// User Signal Enable Bit
+	int GIDFlag;			// Group Signal Enable Bit
+
+	int sig_flag;			// Signal flag 
+					// 0 - No signal, some processes are currently sleeping on this event
+					// 1 - Signal is set
+					
+	atomic_t counter;			// The number of processes currently sleeping on this event
+	struct list_head evtlist;	// Linux list structure
+	wait_queue_head_t waitq;	// Waiting queue for this event
+};
+
+typedef struct event_struct event_t;
+
+/* Init function for events */
+void __init doevent_init(void);
+
+#endif
diff --git a/linux-3.18.20/include/linux/syscalls.h b/linux-3.18.20/include/linux/syscalls.h
index bda9b81..bf4705b 100644
--- a/linux-3.18.20/include/linux/syscalls.h
+++ b/linux-3.18.20/include/linux/syscalls.h
@@ -877,4 +877,12 @@ asmlinkage long sys_seccomp(unsigned int op, unsigned int flags,
 asmlinkage long sys_getrandom(char __user *buf, size_t count,
 			      unsigned int flags);
 asmlinkage long sys_bpf(int cmd, union bpf_attr *attr, unsigned int size);
+asmlinkage long sys_doeventopen(void);
+asmlinkage long sys_doeventclose(int eventID);
+asmlinkage long sys_doeventwait(int eventID);
+asmlinkage long sys_doeventsig(int eventID);
+asmlinkage long sys_doeventinfo(int num, int* eventID);
+asmlinkage long sys_doeventchown(int eventID, uid_t UID, gid_t GID);
+asmlinkage long sys_doeventchmod(int eventID, int UIDFlag, int GIDFlag);
+asmlinkage long sys_doeventstat(int eventID, uid_t *UID, gid_t *GID, int *UIDFlag, int *GIDFlag);
 #endif
diff --git a/linux-3.18.20/init/main.c b/linux-3.18.20/init/main.c
index 321d0ce..fe8d831 100644
--- a/linux-3.18.20/init/main.c
+++ b/linux-3.18.20/init/main.c
@@ -78,6 +78,7 @@
 #include <linux/context_tracking.h>
 #include <linux/random.h>
 #include <linux/list.h>
+#include <linux/events.h>
 
 #include <asm/io.h>
 #include <asm/bugs.h>
@@ -89,6 +90,8 @@
 #include <asm/smp.h>
 #endif
 
+extern void doevent_init(void);
+
 static int kernel_init(void *);
 
 extern void init_IRQ(void);
@@ -677,6 +680,7 @@ asmlinkage __visible void __init start_kernel(void)
 	ftrace_init();
 
 	/* Do the rest non-__init'ed, we're now alive */
+	doevent_init();
 	rest_init();
 }
 
diff --git a/linux-3.18.20/kernel/Makefile b/linux-3.18.20/kernel/Makefile
index 17ea6d4..5ae7486 100644
--- a/linux-3.18.20/kernel/Makefile
+++ b/linux-3.18.20/kernel/Makefile
@@ -9,7 +9,7 @@ obj-y     = fork.o exec_domain.o panic.o \
 	    extable.o params.o \
 	    kthread.o sys_ni.o nsproxy.o \
 	    notifier.o ksysfs.o cred.o reboot.o \
-	    async.o range.o groups.o smpboot.o
+	    async.o range.o groups.o smpboot.o events.o
 
 ifdef CONFIG_FUNCTION_TRACER
 # Do not trace debug files and internal ftrace files
diff --git a/linux-3.18.20/kernel/events.c b/linux-3.18.20/kernel/events.c
new file mode 100644
index 0000000..6eed1ab
--- /dev/null
+++ b/linux-3.18.20/kernel/events.c
@@ -0,0 +1,531 @@
+/*
+* CSC456 Machine Problem 3
+*
+* Authors:
+* Jaime Montoya
+* Georgiy Platonov
+*/
+
+#include <linux/kernel.h>
+#include <linux/events.h>
+#include <linux/spinlock.h>
+#include <linux/slab.h>
+#include <linux/syscalls.h>
+#include <linux/types.h>
+#include <linux/wait.h>
+
+/* Maximum number of eventIDs available.
+*  If nextID == MAX_EVENTS, it's impossible to create events anymore 
+*/
+#define MAX_EVENTS 1000000
+
+/* Roles defining operations associated with an event. 
+ * ROLE_WAITSIG - waiting and signaling on an event
+ * ROLE_CLOSE - closing an event
+ * ROLE_MODIFY - modification of UID and GID of an event 
+ */
+#define ROLE_WAITSIG 1
+#define ROLE_CLOSE 2
+#define ROLE_MODIFY 3
+
+static LIST_HEAD(events);
+static int nextID;
+static DEFINE_SPINLOCK(event_lock);
+static int event_count;
+
+/*
+ * Function: doevent_init()
+ *
+ * Description:
+ *  This function is called when the system is booted. It was added to 
+ *  this file: linux-3.18.20/init/main.c, inside 
+ *  asmlinkage __visible void __init start_kernel(void){}.
+ *
+ * Inputs:
+ *  No inputs.
+ * 
+ * Outputs: 
+ *  No outputs.
+ *
+ * Return value:
+ *  No return.
+ */
+
+void __init doevent_init(void)
+{
+	nextID = 0;
+	event_count = 0;
+	printk("Event init ok...\n");
+}
+
+/*
+ * Function: get_event_by_id()
+ *
+ * Description:
+ *  This function finds an event in the event list using the eventID received
+ *  as a parameter.
+ *
+ * Inputs:
+ *  eventID - An integer that corresponds to the event that the function will
+ *  try to find. 
+ * 
+ * Outputs: 
+ *  No outputs.
+ *
+ * Return value:
+ *  A pointer to the element in the event list with the eventID 
+ *  received as a parameter. Returns NULL if the event was not found in 
+ *  the event list.
+ */
+event_t* get_event_by_id(int eventID)
+{
+	event_t *ret_val;
+	list_for_each_entry(ret_val, &events, evtlist)
+	{
+		if(ret_val->eventID == eventID)
+			return ret_val;	
+	}
+	return NULL;
+}
+
+/*
+ * Function: check_privileges()
+ *
+ * Description:
+ *  This function is used to check the privileges based on Event Access Control
+ *  rules created for the system calls on events.
+ *
+ * Inputs:
+ *  event - A pointer to a memory location in which to store the event that
+ *  will be evaluated for the corresponding privileges.
+ *  roleflag - An integer that will determine the roles defining operations 
+ *  associated with an event. The possible values are defined above in this 
+ *  file.
+ *
+ * Outputs: 
+ *  No outputs.
+ *
+ * Return value:
+ *  0 - Insufficient privileges, do not allow access.
+ *  1 - Sufficient privileges, allow access.
+ */
+int check_privileges(event_t* event, int roleflag)
+{
+	/* Getting effective UID and GID of the current process */
+	uid_t EUID = sys_geteuid();
+	gid_t EGID = sys_getegid();
+	
+	/* Root can always do everything */ 
+	if(EUID == 0)
+		return 1;
+
+	if(roleflag == ROLE_WAITSIG || roleflag == ROLE_CLOSE)
+	{
+		if((EUID == event->UID && event->UIDFlag == 1) 
+		   || (EUID != event->UID && EGID == event->GID
+		       && event->GIDFlag == 1))
+			return 1;
+	}
+	else if(roleflag == ROLE_MODIFY)
+	{
+		if(EUID == event->UID)
+			return 1;
+	}
+	return 0;
+}
+
+/*
+ * Function: sys_doeventopen()
+ *
+ * Description:
+ *  This function creates a new event.
+ *
+ * Inputs:
+ *  void - The function takes zero arguments.
+ * 
+ * Outputs: 
+ *  No outputs.
+ *
+ * Return value:
+ *  eventID - The event ID of the event that was created successfully.
+ *  -1 - Creation of the event failed.
+ */
+asmlinkage long sys_doeventopen(void)
+{	
+	spin_lock(&event_lock);
+
+	/* Too many events */
+	if(nextID == MAX_EVENTS)	
+	{
+		spin_unlock(&event_lock);
+		return -1;	
+	}
+
+	event_t *tmp = (event_t *)kmalloc(sizeof(event_t), GFP_KERNEL);
+
+	/* Not enough memory to create event */
+	if(tmp == NULL)			
+	{
+		spin_unlock(&event_lock);
+		return -1;	
+	}
+
+	/* Init new event */
+	INIT_LIST_HEAD(&tmp->evtlist);
+	tmp->eventID = nextID;
+	tmp->UID = sys_geteuid();
+	tmp->GID = sys_getegid();
+	tmp->UIDFlag = 1;
+	tmp->GIDFlag = 1;
+	atomic_set(&(tmp->counter), 0);
+	tmp->sig_flag = 1;
+	init_waitqueue_head(&(tmp->waitq));
+
+	list_add(&(tmp->evtlist), &events);
+	nextID++;
+	event_count++;
+	spin_unlock(&event_lock);	
+	return tmp->eventID;
+}
+
+/*
+ * Function: sys_doeventclose()
+ *
+ * Description:
+ *  This function destroys an event with the given event ID and signals any 
+ *  processes waiting on the event to leave the event.
+ *
+ * Inputs:
+ *  eventID - An integer that corresponds to the event that the function will
+ *  be applied to.
+ * 
+ * Outputs: 
+ *  No outputs.
+ *
+ * Return value:
+ *  proc_num - Number of processes signaled.
+ */
+asmlinkage long sys_doeventclose(int eventID)
+{
+	int proc_num = -1; 	//Number of processes waiting on an event
+
+	spin_lock(&event_lock);
+
+	event_t *tmp = get_event_by_id(eventID);
+	
+	/* If there is no event with provided eventID or
+	*  we don't have enough privileges then fail 
+	*/
+	if(tmp == NULL || check_privileges(tmp, ROLE_CLOSE) == 0
+	   || check_privileges(tmp, ROLE_WAITSIG) == 0)
+	{
+		spin_unlock(&event_lock);
+		return -1;
+	}
+	
+	/* Remember the number of waiting processes,
+	*  set signal flag to 1 (send a signal),
+	*  wake up all the waiting processes
+	*/
+	proc_num = atomic_read(&(tmp->counter));
+	tmp->sig_flag = 1;
+	wake_up_interruptible(&(tmp->waitq));
+
+	
+	/* Save the amount of waiting processes,
+	* delete the event from the list and free memory
+	*/
+	list_del(&(tmp->evtlist));
+	event_count--;	
+	kfree(tmp);
+	spin_unlock(&event_lock);
+	return proc_num;
+}
+
+/*
+ * Function: sys_doeventwait()
+ *
+ * Description:
+ *  This function blocks process until the event is signaled.
+ *
+ * Inputs:
+ *  eventID - An integer that corresponds to the event that the function will
+ *  be applied to.
+ *
+ * Outputs: 
+ *  No outputs.
+ *
+ * Return value:
+ *  1 - Process blocking succeeded.
+ *  -1 - Process blocking failed.
+ */
+asmlinkage long sys_doeventwait(int eventID)
+{
+	spin_lock(&event_lock);
+
+	event_t *tmp = get_event_by_id(eventID);
+
+	/* If there is no event with provided eventID then fail */
+	if(tmp == NULL)
+	{
+		spin_unlock(&event_lock);
+		return -1;
+	}
+
+	/* Increment the counter of waiting processes 
+	*  and set signal flag to 0 (No signals) 
+	*/
+	atomic_inc(&(tmp->counter));
+	tmp->sig_flag = 0;
+	spin_unlock(&event_lock);
+
+	wait_event_interruptible(tmp->waitq, tmp->sig_flag == 1);
+	atomic_dec(&(tmp->counter));	
+	return 1;
+}
+
+/*
+ * Function: sys_doeventsig()
+ *
+ * Description:
+ *  This function unblocks all waiting processes, or it is ignored if no
+ *  processes are blocked.
+ *
+ * Inputs:
+ *  eventID - An integer that corresponds to the event that the function will
+ *  be applied to.
+ *
+ * Outputs: 
+ *  No outputs. 
+ *
+ * Return value:
+ *  proc_num - Number of processes signaled on success.
+ *  -1 - Unblocking the waiting processes failed.
+ */
+asmlinkage long sys_doeventsig(int eventID)
+{
+	int proc_num = -1;
+
+	spin_lock(&event_lock);
+
+	event_t *tmp = get_event_by_id(eventID);
+
+	/* If there is no event with provided eventID 
+	*  or we don't have enough privileges then fail 
+	*/
+	if(tmp == NULL || check_privileges(tmp, ROLE_WAITSIG) == 0)
+	{
+		spin_unlock(&event_lock);
+		return -1;
+	}
+	
+	/* Remember the number of waiting processes,
+	*  set signal flag to 1 (send a signal),
+	*  wake up all the waiting processes
+	*/
+	proc_num = atomic_read(&(tmp->counter));
+	tmp->sig_flag = 1;
+	wake_up_interruptible(&(tmp->waitq));
+	
+	spin_unlock(&event_lock);
+	return proc_num;
+}
+
+/*
+ * Function: sys_doeventinfo()
+ *
+ * Description:
+ *  This function fills in the array of integers pointed to by eventIDs with
+ *  the current set of active event IDs.
+ *
+ * Inputs:
+ *  num - The number of integers the memory pointed to by eventIDs can hold.
+ *  eventIDs - A pointer to a memory location in which to store the set of 
+ *  active eventIDs.
+ *
+ * Outputs: 
+ *  eventIDs - the array in user space to store existing event IDs.
+ *
+ * Return value:
+ *  index - Value corresponding to the number of active events.
+ *  -1 - The function failed to return the number of active events.
+ */
+asmlinkage long sys_doeventinfo(int num, int *eventIDs)
+{	
+	/* Safety checks */
+	if(eventIDs == NULL)
+		return event_count;
+	if(num < event_count)
+		return -1;
+
+	spin_lock(&event_lock);		
+
+	/* Try to create a temporary buffer to store event IDs */
+	int *IDs = (int*)kmalloc(event_count*sizeof(int), GFP_KERNEL);
+
+	if(IDs == NULL)
+	{
+		spin_unlock(&event_lock);
+		return -1;
+	}
+
+	/* Scan through the list of events and fill IDs array */
+	event_t *tmp;
+	int index = 0;
+	list_for_each_entry(tmp, &events, evtlist)
+	{
+		IDs[index] = tmp->eventID;
+		index++;
+	}
+	
+	/* Copy IDs to eventIDs and check if the copying succeded */
+	if(copy_to_user(eventIDs, IDs, event_count*sizeof(int)) != 0)
+	{
+		spin_unlock(&event_lock);
+		return -1;
+	}
+	spin_unlock(&event_lock);
+
+	/* We return index because event_count may
+	*  change between this and the previous instruction
+	*/
+	return index;	
+}
+
+/*
+ * Function: sys_doeventchown()
+ *
+ * Description:
+ *  This function changes the UID and GID of the event to the specified values.
+ *
+ * Inputs:
+ *  eventID - An integer that corresponds to the event that the function will
+ *  be applied to.
+ *  UID - new effective UID value for this event.
+ *  GID - new effective GID value for this event.
+ *
+ * Outputs: 
+ *  No outputs.
+ *
+ * Return value:
+ *  0 - Succeeded changing the UID and GID of the event.
+ *  -1 - Failed changing the UID and GID of the event.
+ */
+asmlinkage long sys_doeventchown(int eventID, uid_t UID, gid_t GID)
+{
+	spin_lock(&event_lock);
+
+	event_t *tmp = get_event_by_id(eventID);
+	
+	/* If there is no event with provided eventID 
+	*  or we don't have enough privileges then fail 
+	*/
+	if(tmp == NULL || check_privileges(tmp, ROLE_MODIFY) == 0)
+	{
+		spin_unlock(&event_lock);
+		return -1;		
+	}
+
+	tmp->UID = UID;
+	tmp->GID = GID;
+	spin_unlock(&event_lock);
+	return 0;
+}
+
+/*
+ * Function: sys_doeventchmod()
+ *
+ * Description:
+ *  This function changes the User Signal Enable Bit (UIDFlag) and the Group Signal 
+ *  Enable Bit (GIDFlag) to provided values.
+ *
+ * Inputs:
+ *  eventID - An integer that corresponds to the event that the function will
+ *  be applied to.
+ *  UIDFlag - New value for the event's UIDFlag
+ *  GIDFlag - New value for the event's GIDFlag
+ *
+ * Outputs: 
+ *  No outputs.
+ *
+ * Return value:
+ *  0 - Succeeded changing the User Signal Enable Bit and Group Signal Enable Bit.
+ *  -1 - Failed changing the User Signal Enable Bit or Group Signal Enable Bit.
+ */
+asmlinkage long sys_doeventchmod(int eventID, int UIDFlag, int GIDFlag)
+{
+	spin_lock(&event_lock);
+
+	event_t *tmp = get_event_by_id(eventID);
+
+	/* If there is no event with provided eventID 
+	*  or we don't have enough privileges then fail 
+	*/
+	if(tmp == NULL || check_privileges(tmp, ROLE_MODIFY) == 0)
+	{
+		spin_unlock(&event_lock);
+		return -1;		
+	}
+
+	tmp->UIDFlag = UIDFlag;
+	tmp->GIDFlag = GIDFlag;
+	spin_unlock(&event_lock);
+	return 0;
+}
+/*
+ * Function: sys_doeventstat()
+ *
+ * Description:
+ *  This function places the UID, GID, User Signal Enable Bit, and Group Signal Enable
+ *  Bit into the memory pointed to by UID, GID, UIDFlag, and GIDFlag, respectively.
+ *
+ * Inputs:
+ *  eventID - An integer that corresponds to the event that the function will
+ *  be applied to.
+ *  UID - A pointer to a memory location in which to store the UID.
+ *  GID - A pointer to a memory location in which to store the GID.
+ *  UIDFlag - A pointer to a memory location in which to store the UIDFlag.
+ *  GIDFlag - A pointer to a memory location in which to store the GIDFlag.
+ *
+ * Outputs: 
+ *  No outputs.
+ *
+ * Return value:
+ *  0 - Succeeded placing values into memory corresponding to UID, GID, UIDFlag, and 
+ *  GIDFlag.
+ *  -1 - Failed placing values into memory corresponding to UID, GID, UIDFlag, and 
+ *  GIDFlag.
+ */
+asmlinkage long sys_doeventstat(int eventID, uid_t __user *UID, gid_t __user *GID,
+ int __user *UIDFlag, int __user *GIDFlag)
+{
+	/* Pointer safety check */
+	if(UID == NULL || GID == NULL || UIDFlag == NULL || GIDFlag == NULL)
+		return -1;
+
+	spin_lock(&event_lock);
+
+	event_t *tmp = get_event_by_id(eventID);
+
+	/* If no event with specified event ID then fail */
+	if(tmp == NULL)
+	{
+		spin_unlock(&event_lock);
+		return -1;	
+	}
+
+	/* Copy the event's UID, GID, UIDFlag, GIDFlag 
+	*  and check whether the operation succeded 
+	*/
+	if(copy_to_user(UID, &(tmp->UID), sizeof(uid_t)) != 0 
+	|| copy_to_user(GID, &(tmp->GID), sizeof(gid_t)) != 0
+	|| copy_to_user(UIDFlag, &(tmp->UIDFlag), sizeof(int)) != 0 
+	|| copy_to_user(GIDFlag, &(tmp->GIDFlag), sizeof(int)) != 0)
+	{	
+		spin_unlock(&event_lock);		
+		return -1;
+	}
+
+	spin_unlock(&event_lock);
+	return 0;
+}
diff --git a/runqemu.sh b/runqemu.sh
index ba5d34e..9daa788 100755
--- a/runqemu.sh
+++ b/runqemu.sh
@@ -9,5 +9,5 @@ then
 	./install/bin/qemu-system-x86_64 -m 64M -L ./install/qemu/share/qemu/ -nographic -hda ./openwrt-15.05-x86-generic-combined-ext4.img -fda fat:floppy:`pwd`/floppy
 else
 	echo "Running QEMU with your kernel at $1"
-	./install/bin/qemu-system-x86_64 -m 64M -L ./install/qemu/share/qemu/ -nographic -kernel $1 -hda ./openwrt-15.05-x86-generic-combined-ext4.img -append "root=PARTUUID=076b2e55-02 rootfstype=ext4 rootwait console=tty0 console=ttyS0,38400n8 noinitrd" -fda fat:floppy:`pwd`/floppy
+	./install/bin/qemu-system-x86_64 -m 64M -L ./install/qemu/share/qemu/ -nographic -kernel $1 -hda ./openwrt-15.05-x86-generic-combined-ext4.img -append "root=PARTUUID=076b2e55-02 rootfstype=ext4 rootwait console=tty0 console=ttyS0,38400n8 noinitrd" -hdb floppy/test -fda fat:floppy:`pwd`/floppy
 fi
